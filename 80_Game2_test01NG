# 定数の設定
Const増加率 = 1.2
Const時間間隔 = 5
画面幅 = 400
画面高さ = 400

# 画面の設定
描画中キャンバスの「幅」に画面幅をDOM属性設定。
描画中キャンバスの「高さ」に画面高さをDOM属性設定。

# 自機の初期位置
自機X = 画面幅 / 2
自機Y = 画面高さ / 2

# 敵の初期数
敵数 = 10

# 時間の初期化
時間 = 0

# 敵のリスト
敵リスト = []

# ランダム範囲の数値を返す関数
関数 ランダム範囲(min, max)
    それ = min + ランダム * (max - min)
ここまで。

# 敵の初期化関数
関数 敵初期化(数)
    色リスト = ["白", "黄色", "青", "緑", "紫", "赤"]
    数を1から数まで繰り返す
        ランダム色 = 色リスト[(6の乱数)]
        敵 = {
            "X": ランダム * 画面幅,
            "Y": ランダム * 画面高さ,
            "サイズ": ランダム範囲(10, 30),
            "色": ランダム色,
            "速度": ランダム範囲(10, 40),
            "移動方向X": ランダム範囲(-1, 1),
            "移動方向Y": ランダム範囲(0.5, 1)
        }
        敵リスト = 敵リスト + [敵]
    ここまで。
ここまで。

# マウス移動時の処理
描画中キャンバスをマウス移動した時には
    自機X = マウスX
    自機Y = マウスY
ここまで。

# 敵の移動関数
関数 敵移動(敵)
    敵["X"] = 敵["X"] + 敵["速度"] * 敵["移動方向X"]
    敵["Y"] = 敵["Y"] + 敵["速度"] * 敵["移動方向Y"]
    
    # 画面外に出たら反対側に戻す
    もし、敵["X"] > 画面幅 または 敵["X"] < 0 ならば
        敵["移動方向X"] = 敵["移動方向X"] * -1
    ここまで。
    もし、敵["Y"] > 画面高さ または 敵["Y"] < 0 ならば
        敵["移動方向Y"] = 敵["移動方向Y"] * -1
    ここまで。
ここまで。

# 初期化
敵初期化(敵数)

# メインループ
(1)の間
    # 画面を再描画
    黒色に塗色設定。
    [0, 0, 画面幅, 画面高さ]に四角描画。

    # 自機の描画
    水色に塗色設定。
    [自機X, 自機Y]へ20の円描画。

    # 敵の移動と描画
    敵リストを反復
        敵 = それ
        敵移動(敵)
        敵["色"]に塗色設定。
        [敵["X"], 敵["Y"], 敵["サイズ"], 敵["サイズ"]]に四角描画。
    ここまで。

    # 敵の数を増やす処理
    もし、時間 % (Const時間間隔 * 30) == 0 かつ 時間 != 0ならば
        敵数 = ((敵数 * Const増加率)を整数へ丸め)
        敵初期化(敵数)
    ここまで。

    # 時間を進める
    時間 = 時間 + 1

    0.03秒待つ
ここまで。
